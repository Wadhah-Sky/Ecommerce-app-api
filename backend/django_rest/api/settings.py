"""
Django settings for api project.

Generated by 'django-admin startproject' using Django 4.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""


from pathlib import Path
from django.contrib import admin
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# Note: BASE_DIR will be represented inside Docker container not in host
#       machine, so it's will be:
#       /usr/src/backend/django_rest
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(int(os.environ.get('DEBUG', 0)))

# Note: Values in this list can be fully qualified names (e.g.
#       'www.example.com'), in which case they will be matched against the
#       request’s Host header exactly (case-insensitive, not including port).
#       A value beginning with a period can be used as a subdomain wildcard:
#       '.example.com' will match example.com, www.example.com, and any other
#       subdomain of example.com. A value of '*' will match anything; in this
#       case you are responsible to provide your own validation of the Host
#       header (perhaps in a middleware; if so this middleware must be listed
#       first in MIDDLEWARE_CLASSES). In case you try to reach Django server
#       with a host name that not listed will get response of HTTP Bad Request.
ALLOWED_HOSTS = []
ALLOWED_HOSTS.extend(
    filter(
        None,
        os.environ.get('ALLOWED_HOSTS', '').split(','),
    )
)

# Application definition

INSTALLED_APPS = [
    'admin_interface',
    'colorfield',
    'dal',
    'dal_select2',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.postgres',
    'django.contrib.sites',
    'rest_framework',
    'rest_framework.authtoken',
    'django_filters',
    'drf_multiple_model',
    'phonenumber_field',
    'django_phonenumbers',
    'djmoney',
    'imagekit',
    'nested_admin',
    'durationwidget',
    'django_admin_hstore_widget',
    'mptt',
    'anymail',
    'django_elasticsearch_dsl',
    'log_viewer',
    'core',
    'home',
    'store',
    'user',
    'product',
    'cart',
    'shipping',
    'payment',
    'order'
]

# How to set LocaleMiddleware that related to language select (here we don't
# use)?
# 1- Make sure it’s one of the first middleware installed.
# 2- It should come after SessionMiddleware, because LocaleMiddleware makes use
#    of session data. And it should come before CommonMiddleware because
#    CommonMiddleware needs an activated language in order to resolve the
#    requested URL.
# 3- If you use CacheMiddleware, put LocaleMiddleware after it.
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'api.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['public/templates'],
        # With APP_DIRS set to True, the template loader will look in the app’s
        # templates directory and find the templates. APP_DIRS must not be set
        # when loaders is defined.
        'APP_DIRS': False,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            'loaders': [
                'apptemplates.Loader',
                'django.template.loaders.filesystem.Loader',
                'django.template.loaders.app_directories.Loader',
            ],
        },
    },
]

WSGI_APPLICATION = 'api.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': os.environ.get(
            'SQL_ENGINE',
            'django.db.backends.postgresql'
        ),
        'NAME': os.environ.get(
            'SQL_NAME',
            os.path.join(BASE_DIR, 'db.postgres')
        ),
        'USER': os.environ.get('SQL_USER', 'user'),
        'PASSWORD': os.environ.get('SQL_PASS', 'password'),
        'HOST': os.environ.get('SQL_HOST', 'localhost'),
        'PORT': os.environ.get('SQL_PORT', '5432')
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

# LocaleMiddleware tries to determine the user’s language preference by
# following this algorithm:
# 1- it looks for the language prefix in the requested URL. This is only
#    performed when you are using the i18n_patterns function in your root
#    URLconf. add the following to your main url.py file within urlpatterns:
#
#    re_path(r'^i18n/', include('django.conf.urls.i18n'))
#
# 2- if no url is defined, it looks for a cookie. The name of the cookie used
#    is set by the LANGUAGE_COOKIE_NAME setting. (The default name is
#    django_language.)
# 3- if there is no cookie, it looks at the Accept-Language HTTP header. This
#    header is sent by your browser and tells the server which language(s) you
#    prefer, in order by priority. Django tries each language in the header
#    until it finds one with available translations.
# 4- if there is no Accept-Language HTTP header, it uses the global
#    LANGUAGE_CODE setting.

LANGUAGE_CODE = 'en-us'

# Only languages listed in the LANGUAGES setting can be selected. If you want
# to restrict the language selection to a subset of provided languages (because
# your application doesn't provide all those languages), set LANGUAGES to a
# list of languages.
LANGUAGES = [
    ("en", "English"),
]

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# A sample logging configuration. The only tangible logging performed by this
# configuration is to send email to the site admins on every HTTP error or
# warning...etc. when the DEBUG=False.
# See http://docs.djangoproject.com/en/dev/topics/logging for more details on
# how to customize your logging configuration.
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    # The handler is the engine that determines what happens to each message
    # in a logger. It describes a particular logging behavior, such as writing
    # a message to the screen, to a file, or to a network socket.
    'handlers': {
        # This handler that we named it "console" is useful to watch logs as
        # stdr screen to watch logging stream in the terminal.
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "simple"
        },
        # The built-in AdminEmailHandler deserves a mention in the context of
        # security. If its include_html option is enabled, the email message it
        # sends will contain a full traceback, with names and values of local
        # variables at each level of the stack, plus the values of your Django
        # settings (in other words, the same level of detail that is exposed
        # in a web page when DEBUG is True).
        # It’s generally not considered a good idea to send such potentially
        # sensitive information over email. Consider instead using one of the
        # many third-party services to which detailed logs can be sent.
        # Note: the email address will be used is the same SERVER_EMAIL.
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler'
        },
        'file': {
            # This log level describes the severity of the messages that the
            # logger will handle. Python defines the following log levels:
            #
            # DEBUG: Low level system information for debugging purposes
            # INFO: General system information
            # WARNING: Information describing a minor problem that has
            #          occurred.
            # ERROR: Information describing a major problem that has occurred.
            # CRITICAL: Information describing a critical problem that has
            #           occurred.
            "level": "DEBUG",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": '/var/log/django/debug.log',
            "formatter": "verbose",
            "maxBytes": 1024 * 1024 * 5,  # 5MB
            # When specified log file reach the size of 5MB, a new one will
            # be created and so on until we reach the 'backupCount' then Django
            # will delete the oldest.
            "backupCount": 5,
            "encoding": "utf-8"
        },
    },
    # Each message that is written to the logger is a Log Record. Each log
    # record also has a log level indicating the severity of that specific
    # message. A log record can also contain useful metadata that describes the
    # event that is being logged. This can include details such as a stack
    # trace or an error code.
    'loggers': {
        "django": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": False,
        },
        'django.request': {
            'handlers': ['mail_admins', "file"],
            'level': 'ERROR',
            'propagate': True,
        },
    },
    # A filter is used to provide additional control over which log records are
    # passed from logger to handler. By default, any log message that meets log
    # level requirements will be handled. However, by installing a filter, you
    # can place additional criteria on the logging process. For example, you
    # could install a filter that only allows ERROR messages from a particular
    # source to be emitted.
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    # Ultimately, a log record needs to be rendered as text. Formatters
    # describe the exact format of that text. A formatter usually consists of
    # a Python formatting string containing LogRecord attributes; however, you
    # can also write custom formatters to implement specific formatting
    # behavior.
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d}"
                      " {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {module} {message}",
            "style": "{",
        },
    },
}

# Set values for django logging viewer
LOG_VIEWER_FILES = ['/var/log/']
LOG_VIEWER_FILES_DIR = 'django/'
LOG_VIEWER_FILES_PATTERN = '*.log*'
# total log lines per-page
LOG_VIEWER_PAGE_LENGTH = 25
# total log lines will be read
LOG_VIEWER_MAX_READ_LINES = 1000
# Max log files loaded in Datatable per page
LOG_VIEWER_FILE_LIST_MAX_ITEMS_PER_PAGE = 25
LOG_VIEWER_PATTERNS = [
    '[INFO]', '[DEBUG]', '[WARNING]', '[ERROR]', '[CRITICAL]'
]
# String regex expression to exclude the log from line
LOG_VIEWER_EXCLUDE_TEXT_PATTERN = None


# Set global throttle classes for authenticated/unauthenticated user to be used
# with api requests.
# Note: Throttling is similar to Permissions, in that it determines if
#       a request should be authorized. Throttles indicate a temporary state,
#       and are used to control the rate of requests that clients can make to
#       an API.
#
# Note: The 'X-Forwarded-For' (XFF) HTTP header which is a de-facto standard
#       header for identifying the originating IP address of a client
#       connecting to a web server through a proxy server:
#
#       X-Forwarded-For: <client>, <proxy1>, <proxy2>
#
#       and 'REMOTE_ADDR' WSGI variable are used to uniquely identify client IP
#       addresses for throttling. If the 'X-Forwarded-For' header is present
#       then it will be used, otherwise the value of the 'REMOTE_ADDR' variable
#       from the 'WSGI' environment will be used.
#       If you need to strictly identify unique client IP addresses, you'll
#       need to first configure the number of application proxies that the API
#       runs behind by setting the 'NUM_PROXIES' setting. This setting should
#       be an integer of zero or more. If set to non-zero then the client IP
#       will be identified as being the last IP address in the X-Forwarded-For
#       header, once any application proxy IP addresses have first been
#       excluded. If set to zero, then the 'REMOTE_ADDR' value will always be
#       used as the identifying IP address.
#
# Info: As with permissions, multiple throttles may be used. Your API might
#       have a restrictive throttle for unauthenticated requests, and a less
#       restrictive throttle for authenticated requests.
#       You should know that for authenticated user, Django will create key
#       that can identify the authenticated user.
REST_FRAMEWORK = {
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle'
    ],
    'DEFAULT_THROTTLE_RATES': {
        # Note: Multiple throttles can also be used if you want to impose both
        #       burst throttling rates, and sustained throttling rates. For
        #       example, you might want to limit a user to a maximum of 60
        #       requests per minute, and 1000 requests per day.
        # Info: The rate descriptions used in DEFAULT_THROTTLE_RATES may
        #       include as the throttle period:
        #       1- second
        #       2- minute
        #       3- hour
        #       4- day

        # Set default value for anonymous user.
        'anon': '1500/day',
        # Set default value for authenticated user.
        'user': '2000/day',

        # Set extra scopes.
        # Note: take in consideration two persons living in same house that
        #       using same IP address over NAT.
        'anon_min': '1/minute',
        'user_min': '1/minute'
    }
}

# Specify Site ID to domain name that defined in Site table in database.
# Note: default SITE_ID is '1' or '2' with domain/display name of 'example.com'
#       you should change it through shell, django admin Site model page or
#       directly through database to value of production domain name.
#       Knowing that you should reset/change the table of 'django_site' in the
#       database so 'id' field increment in the right way.
SITE_ID = 1

MAIN_DOMAIN_NAME = os.environ.get('MAIN_DOMAIN_NAME', '')

# Static files are made at server run (CSS, JavaScript, Images)
# Media files are made at runtime and uploaded by users like images, files or
# videos.
# https://docs.djangoproject.com/en/4.0/howto/static-files/

# Specify the directories for the project static files (where they were created
# in Docker image).
STATIC_ROOT = '/usr/src/vol/web/static'
MEDIA_ROOT = '/usr/src/vol/web/media'

# Specify the url for the web server where can view static files.
STATIC_URL = '/static/static/'
MEDIA_URL = '/static/media/'

# Define additional list for static files to collect.
# Note: if your container is not connected to source code in host machine, then
#       you need to re-build the image, before run 'collectstatic' command
#       because the listed directory maybe in not uploaded to the container
#       image.
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

# if you want to use modals instead of popup windows, ensure to add
X_FRAME_OPTIONS = "SAMEORIGIN"

# The security checks do not make your site secure. They do not audit code, do
# intrusion detection, or do anything particularly complex. Rather, they help
# perform an automated, low-hanging-fruit checklist, that can help you to
# improve your site’s security.
# Some of these checks may not be appropriate for your particular deployment
# configuration. For instance, if you do your HTTP to HTTPS redirection in
# a load balancer, it’d be irritating to be constantly warned about not having
# enabled SECURE_SSL_REDIRECT. Use SILENCED_SYSTEM_CHECKS to silence unneeded
# checks.
#
# Info: security.W019 in case you have:
#
#       django.middleware.clickjacking.XFrameOptionsMiddleware
#
#       in your MIDDLEWARE, but X_FRAME_OPTIONS is not set to 'DENY'. Unless
#       there is a good reason for your site to serve other parts of itself
#       in a frame, you should change it to 'DENY'.
SILENCED_SYSTEM_CHECKS = ["security.W019"]

# Define sorted list of tuples of your project apps and its models.
# ADMIN_ORDERING = [
#     # ('auth', ['Group']),
#     ('sites', ['Site']),
#     ('core', [
#         'Meta',
#         'MetaItem',
#         'Icon',
#         'Country',
#         'Address',
#         'User',
#         'Category',
#         'TopBanner',
#         'Banner',
#         'Card',
#         'Section',
#         'Attribute',
#         'Supplier',
#         'Product',
#         'ProductAttribute',
#         'ProductItem',
#         'ProductItemAttribute',
#         'ProductGroup',
#         'Promotion',
#         'PromotionCategory',
#         'PromotionItem',
#         'Tax',
#         'PaymentMethod',
#         'ShippingMethod',
#         'PurchaseOrder',
#         'POProfile',
#         'POPayment',
#         'POShipping',
#         'POItem',
#         'Review'
#     ]),
# ]


# def get_app_list(self, request, app_label=None):
#     """Method to override the sort of Django admin models/indexes"""
#
#     app_dict = self._build_app_dict(request, app_label)
#
#     if not app_dict:
#         return
#
#     new_admin_ordering = []
#
#     if app_label:
#         for ao in ADMIN_ORDERING:
#             if ao[0] == app_label:
#                 new_admin_ordering.append(ao)
#                 break
#
#     if not app_label:
#         for app_key in list(app_dict.keys()):
#             if not any(app_key in ao_app for ao_app in ADMIN_ORDERING):
#                 app_dict.pop(app_key)
#
#     app_list = sorted(
#         app_dict.values(),
#         key=lambda x: [ao[0] for ao in ADMIN_ORDERING].index(x['app_label'])
#     )
#
#     for app, ao in zip(app_list, new_admin_ordering or ADMIN_ORDERING):
#         if app['app_label'] == ao[0]:
#             for model in list(app['models']):
#                 if not model['object_name'] in ao[1]:
#                     app['models'].remove(model)
#         app['models'].sort(key=lambda x: ao[1].index(x['object_name']))
#     return app_list

# def get_app_list(self, request):
#     """Method to override the sort of Django admin models/indexes"""
#
#     ###################################################
#     #                                                 #
#     # USE This method to order django admin index     #
#     #                                                 #
#     ###################################################
#     app_dict = self._build_app_dict(request)
#     for app_name, object_list in ADMIN_ORDERING:
#         app = app_dict[app_name]
#         app['models'].sort(key=lambda x: object_list.index(x['object_name']))
#         yield app


# Override the default method of admin get_app_list().
# Note: using this way will force Django admin to show models that only set in
#       the given list, so anything that not defined like (authtoken) will not
#       be shown by default.
# admin.AdminSite.get_app_list = get_app_list

# Set list of hosts which are trusted origins for unsafe requests. If you need
# cross-origin unsafe requests over HTTPS, continuing the example, add
# “subdomain.safesite.com” to this list.
# Note: if you used http://localhost:80 or any domain/subdomain that is
#       unregistered will face issue of:
#
#       forbidden (403) CSRF verification failed. Request aborted
#
#       When trying to pass username and password (authentication) to Django.
CSRF_TRUSTED_ORIGINS = []
CSRF_TRUSTED_ORIGINS.extend(
    filter(
        None,
        os.environ.get('CSRF_TRUSTED_ORIGINS', '').split(','),
    )
)

# Set whether to use header of proxy server or not, set boolean value that
# specifies whether to use the X-Forwarded-Host header in preference to the
# Host header. This should only be enabled if a proxy which sets this header
# is in use, the X-Forwarded-Host header can include the port number, in which
# case you shouldn’t use USE_X_FORWARDED_PORT.
# Note: this useful when using request.build_absolute_uri(<url>) which in this
#       case will use proxy server host:port not application host:port.
#       So, you should set in 'default.conf' file for django app path:
#
#       proxy_set_header X-Forwarded-Host $host:80
#
#       Where 80 is port of nginx container to get reach.
USE_X_FORWARDED_HOST = bool(int(os.environ.get('USE_X_FORWARDED_HOST', 0)))

# Change the SecurityMiddleware value of the Cross-Origin Opener Policy (COOP)
# header on all responses that do not already have it to the value provided,
# the Default is 'same-origin'.
# COOP will process-isolate your document and potential attackers can't access
# your global object if they were to open it in a popup, preventing a set of
# cross-origin attacks dubbed XS-Leaks (Cross-site leaks) where allow websites
# to interact with each other and abuse legitimate mechanisms to gather
# information about the user, often based upon responses received, whether it
# may be timing, error based or abusing features of the browser.
# Note: if you gonna to use HTTP protocol will default value of COOP then will
#       face issue to connect to Django server epically if you are forward host
#       from Nginx server to Django server:
#
#       The Cross-Origin-Opener-Policy header has been ignored, because the
#       URL's origin was untrustworthy. It was defined either in the final r
#       esponse or a redirect. Please deliver the response using the HTTPS
#       protocol. You can also use the 'localhost' origin instead.
#
# Note: if you faced "Mixed Content" warnings in browser console, that because
#       it's occur when an HTTPS page is asked to load a resource over HTTP.
#       This is dangerous because the insecure resources are vulnerable to
#       alteration by an active attacker or eavesdropping by a passive
#       attacker, which violates the user's expectation of security for an
#       HTTPS page. So check if you are using https over http with domain name.
SECURE_CROSS_ORIGIN_OPENER_POLICY = None

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Specify user model of your backend.
AUTH_USER_MODEL = 'core.User'

# Specify the URL of Message Broker for Celery tasks.
# NOTE: make sure to set env variable as:
# redis://<service name OR service container name>:port/0
CELERY_BROKER_URL = os.environ.get(
    'CELERY_BROKER',
    'redis://127.0.0.1:6379/0'
)
# Specify the URL of Backend Database for store the result of Celery tasks.
# NOTE: make sure to set env variable as:
# redis://<service name OR service container name>:port/0
CELERY_RESULT_BACKEND = os.environ.get(
    'CELERY_BACKEND',
    'redis://127.0.0.1:6379/0'
)

# Specify caches of your backend.
# Note: 'CACHE' directory will be created for media files in MEDIA_ROOT.
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': os.environ.get(
            'CELERY_BACKEND',
            'redis://127.0.0.1:6379/0'
        ),
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    },
}

# Specify store phone numbers strings in database.
# Choices: 'E164', 'INTERNATIONAL', 'NATIONAL', 'RFC3966'.
PHONENUMBER_DB_FORMAT = 'E164'

# Specify string formatting of phone numbers.
# Choices: 'E164', 'INTERNATIONAL', 'NATIONAL', 'RFC3966'.
PHONENUMBER_DEFAULT_FORMAT = 'E164'

# Important: Don't store multiple currencies in the database because will be
#            complicated to deal with them, rather than that store the base
#            currency in the database and currency converter to convert it.

# Restrict the currencies listed on the project, like:
# ('USD', 'IQD')
CURRENCIES = ('USD',)

# Specify currency choices, like:
# [('USD', 'USD $'), ('IQD', 'د.ع')]
CURRENCY_CHOICES = [('USD', 'USD $')]

# Map Money model field currency to related symbol.
# Note: can be useful in serializing Money value by get specific symbol for
#       the currency.
CURRENCY_SYMBOLS = {'USD': '$'}

# Specify decimal places for Money field.
MONEY_DECIMAL_PLACES = 2

# Specify Money default currency.
MONEY_DEFAULT_CURRENCY = 'USD'

# Specify backend to send mail with Anymail’s backend.
EMAIL_BACKEND = os.getenv(
    'EMAIL_BACKEND',
    'anymail.backends.amazon_ses.EmailBackend'
)

# Specify Default email address to use for various automated correspondence
# from the site manager(s). This does not include error messages sent to ADMINS
# and MANAGERS;
# Django’s defaults is “webmaster@localhost”
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', 'webmaster@localhost')

# Specify the email address that error messages come from, such as those sent
# to ADMINS and MANAGERS. Django’s defaults is “root@localhost”
# Note: This address is used only for error messages. It is not the address
#       that regular email messages sent with send_mail() come from.
SERVER_EMAIL = os.getenv('SERVER_EMAIL', '')

# Configure Anymail parameters. Not required but in case happen to change
# default name of environment variables for AWS SDK (Boto3) or change some
# details
if os.getenv('EMAIL_BACKEND_NAME', '').lower() == 'mailjet':
    ANYMAIL = {
        "MAILJET_API_KEY": os.getenv('MAILJET_API_KEY', ''),
        "MAILJET_SECRET_KEY": os.getenv('MAILJET_SECRET_KEY', ''),
    }
elif os.getenv('EMAIL_BACKEND_NAME', '').lower() == 'brevo':
    ANYMAIL = {
        "SENDINBLUE_API_KEY": os.getenv('SENDINBLUE_API_KEY', ''),
    }
else:
    # Note: You should pass directly into docker service, the following
    #       environment variables (as shown or updated names) within
    #       (environment) parameters and remember to re-build the service
    #       before use it:
    #
    #       AWS_ACCESS_KEY_ID
    #       AWS_SECRET_ACCESS_KEY
    #       AWS_SESSION_TOKEN  # Required only for temporarily sessions
    #       AWS_DEFAULT_REGION
    #       AWS_DEFAULT_OUTPUT # Default is JSON
    #       AWS_PROFILE  # Profile name for (.aws) file that contains
    #                    # (credentials) and (config) files, if you set this
    #                    # parameter then no need to above parameters. Default
    #                    # is (.aws)
    ANYMAIL = {

        # Optional. Additional client parameters Anymail should use to create
        # the boto3 session client.
        'AMAZON_SES_CLIENT_PARAMS': {
            # example: override normal Boto credentials specifically for
            #          Anymail.
            'aws_access_key_id': os.getenv('AWS_ACCESS_KEY_ID', ''),
            'aws_secret_access_key': os.getenv('AWS_SECRET_ACCESS_KEY', ''),
            # Specify your Amazon SES identity region (that been created)
            # Info: Here we are specified Bahrain (me-south-1)
            'region_name': os.getenv('AWS_DEFAULT_REGION', ''),
            # override other default options
            # "config": {
            #    "connect_timeout": 30,
            #    "read_timeout": 30,
            # }
        },

        # Some email capabilities aren’t supported by all ESPs. When you try to
        # send a message using features Anymail can’t communicate to the
        # current ESP, you’ll get an AnymailUnsupportedFeature error, and the
        # message won’t be sent.
        # If you’d like to silently ignore and send the email, Set the
        # following
        'IGNORE_UNSUPPORTED_FEATURES': True,

        # Optional, Additional session parameters Anymail should use to create
        # the boto3 Session.
        # 'AMAZON_SES_SESSION_PARAMS': {
        #      'profile_name': 'anymail-testing',
        #  },

        # Optional, The name of an Amazon SES Configuration Set Anymail should
        # use when sending messages. The default is to send without any
        # Configuration Set.
        # Note: that a Configuration Set is required to receive SES Event
        #       Publishing tracking events.
        # AMAZON_SES_CONFIGURATION_SET_NAME: "",

        # Optional, default None. The name of an Amazon SES “Message Tag” whose
        # value is set from a message’s Anymail tags.
        # AMAZON_SES_MESSAGE_TAG_NAME: '',
    }

# Set Elasticsearch engine configuration.
ELASTICSEARCH_DSL = {
    'default': {
        # Note: URL must include a 'scheme', 'host', and 'port'
        #       If you want to pass 'http_auth' values within hosts:
        #       <schema>://<username>:<password>@<host>:<port>
        # Important: For Docker service you should set <host> as name of
        #            service in docker compose file otherwise you will face
        #            connection refused [error 111]
        'hosts': [os.getenv('ELASTICSEARCH_HOSTS', 'http://localhost:9200')],
        # Set authentication if you enabled X-Pack in Elasticsearch.
        'http_auth': (
            os.getenv('ELASTIC_USERNAME', 'elastic'),
            os.getenv('ELASTIC_PASSWORD', 'changeme')
        ),
    }
}

# Set website brand title
WEBSITE_BRAND_TITLE = 'Jamie and Cassie'

# Set project main logo title
WEBSITE_MAIN_LOGO_TITLE = 'Main logo'
