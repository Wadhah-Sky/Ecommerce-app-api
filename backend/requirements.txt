# Define your dependencies here

# Install the latest version of Django framework 4.0.2 but less than 4.1.0 version.
Django>=4.0.2,<4.1.0

# Install django's default admin interface with superpowers - customizable themes, popup windows replaced
# by modals and many other features.
# Note: 1- Add admin_interface and colorfield to settings.INSTALLED_APPS before django.contrib.admin
#       2- if you want to use modals instead of popup windows, ensure to
#          add X_FRAME_OPTIONS = "SAMEORIGIN" in settings.py.
#       3- Run "python manage.py migrate"
#       4- Run "python manage.py collectstatic --clear"
django-admin-interface>=0.28.1,<1.0.0

# Install the latest version of Django REST framework 3.13 but less than 3.14 version.
djangorestframework>=3.13.0,<3.14.0

# Install package that is a reusable Django application for allowing users to filter queryset dynamically.
django-filter>=22.1,<22.2

# Install package to support multiple model/queryset view (and mixin) for Django Rest Framework.
django-rest-multiple-models>=2.1.3,<2.2.0

# Install python package 'psycopg2' that used by Django as database driver to communicate with Postgres
# server installed on Docker by using another dependency 'postgresql-client' for the Docker image.
# Note: going to have some dependencies 'build-base postgresql-dev musl-dev' to be installed by 'Dockerfile'
#       when building the image in order to install the 'postgresql-client'.
psycopg2>=2.9.3,<2.10.0

# Install Python client for Redis database and key-value store.
# Note: this package is required by 'django-redis'.
redis>=4.3.1,<4.4.0

# Install full-featured redis cache and session backend for Django.
django-redis>=5.2.0,<5.3.0

# Install asynchronous task queue.
celery>=5.2.6,<5.3.0

# Install a web based tool for monitoring and administrating Celery clusters (queues),
# by processing messages on the 'Messages Broker'.
flower>=1.0.0,<1.1.0

# Install Python Imaging Library that adds image create and processing capabilities to your Python interpreter.
Pillow>=9.0.1,<9.1.0

# Install python package contains a collection of tools for internationalizing Python applications, that required for
# 'PhoneNumberField' widgets.
Babel>=2.9.1,<2.10.0

# Install Django library which interfaces with 'python-phonenumbers' module to validate, pretty print and convert phone
# numbers.
django-phonenumber-field>=6.1.0,<6.2.0
django-phonenumbers>=1.0.1,<1.1.0

# Install django module to adds support for using money and currency fields in django models
# and forms.
django-money>=2.1.1,<2.2.0

# Install Django library for processing images.
django-imagekit>=4.1.0,<4.2.0

# Install django application to handle chained model fields.
# Note: after install is done, add 'dal' and 'dal_select2' at top of INSTALLED_APPS in 'settings.py' file,
#       this will make sure to override the 'jquery.init.js' script provided by the admin, which sets up
#       jQuery with 'noConflict', making jQuery available in django.jQuery only and not $ (global).
django-autocomplete-light>=3.9.4,<3.10.0

# Install django-Hacker: customize default django forms directly from anywhere in the api.
djhacker>=0.1.2,<0.2.0

# Install simple color field for your models with a nice color-picker in the admin-interface.
# Note: After add this package to 'settings.py', you need to run 'python manage.py collectstatic'
django-colorfield>=0.7.0,<1.0.0

# Install package contains Django admin classes that allow for nested inlines.
# Note: After add 'nested_admin' to 'settings.py', you need to run 'python manage.py collectstatic'
django-nested-admin>=3.4.0,<3.5.0

# Install Modified Preorder Tree Traversal for Django Models.
django-mptt>=0.14.0,<0.15.0

# Install Django Duration field widget to handle duration field in the form.
# Note: Make sure to set 'APP_DIRS' to 'True' in 'settings.py'.
django-durationwidget2>=1.0.6,<1.1.0

# Install Widget and Field to properly render HStore data in Django-Admin.
django-admin-hstore-widget>=1.2.1,<1.3.0

# Install Django email backends and webhooks for Amazon SES, MailerSend, and many more.
# Note: You must ensure the 'boto3' package (AWS SDK for Python, and supports sending, tracking,
#       and inbound receiving capabilities) is installed to use Anymailâ€™s Amazon SES backend.
#       So, either include the 'amazon-ses' option when you install Anymail OR separately install 'boto3'.
# Info: After installation is doen, you should add the following line into 'settings.py':
#
#       EMAIL_BACKEND = "anymail.backends.amazon_ses.EmailBackend"
django-anymail[amazon-ses]>=10.0,<11.0

# Install official low-level Python client for Elasticsearch.
elasticsearch>=8.10.0,<8.11.0

# Install high-level library whose aim is to help with writing and running queries against Elasticsearch.
# It is built on top of the official low-level client.
elasticsearch-dsl>=8.9.0,<8.10.0

# Install the package that allows indexing of django models in elasticsearch. It is built as a thin wrapper
# around 'elasticsearch-dsl-py' package, so you can use all the features developed by the elasticsearch-dsl-py team.
# Note: this package should be registered in 'setting.py' file as 'django_elasticsearch_dsl'.
django-elasticsearch-dsl>=8.0,<9.0

# Install Django log viewer.
# Note: 1- Add "log_viewer" to your INSTALLED_APPS setting.
#       2- Include the log viewer URLconf in your project urls.py (the same file that containe settings.py).
#       3- In your settings.py file create the following value:
#
#        LOG_VIEWER_FILES = ['path_to_logfile1', 'path_to_logfile2', ...]
#        LOG_VIEWER_FILES_PATTERN = '*.log*'
#        LOG_VIEWER_FILES_DIR = 'logs/'
#        LOG_VIEWER_PAGE_LENGTH = 25       # total log lines per-page
#        LOG_VIEWER_MAX_READ_LINES = 1000  # total log lines will be read
#        LOG_VIEWER_FILE_LIST_MAX_ITEMS_PER_PAGE = 25 # Max log files loaded in Datatable per page
#        LOG_VIEWER_PATTERNS = ['[INFO]', '[DEBUG]', '[WARNING]', '[ERROR]', '[CRITICAL]']
#        LOG_VIEWER_EXCLUDE_TEXT_PATTERN = None  # String regex expression to exclude the log from line
#
#        # Optionally you can set the next variables in order to customize the admin:
#        LOG_VIEWER_FILE_LIST_TITLE = "Custom title"
#        LOG_VIEWER_FILE_LIST_STYLES = "/static/css/my-custom.css"
#
#       4- Deploy static files.
django-log-viewer>=1.1.7,<2.0.0

# Install python linting tool 'flake8'.
flake8>=4.0.1,<4.1.0