---

# Caller workflow

# Define name of workflow.
name: Ecommerce CI

# Specify events.
on:
  push:
    branches: [main, staging, production]
  pull_request:


# Define workflow actions.
jobs:

  test:
    name: Test
    # if you faced issue of queued jobs, it's related to matrix option and its strategy option (we deleted it).
    runs-on: ${{ fromJSON('["ubuntu-latest", "self-hosted"]')[github.repository == 'github/docs-internal'] }}
    # runs-on: Ubuntu 20.04
    environment: development
    steps:
      - uses: actions/checkout@v4

        #####################################################
        #                                                   #
        # Create .env file and set all secrets required by  #
        # test suites, will set as environment variables    #
        # inside currently test image.                      #
        #                                                   #
        #####################################################
      - name: Set passwords and other required environment variables
        run: |
          cat << EOF > .env
          SECRET_KEY=${{secrets.SECRET_KEY}}
          DEBUG=${{secrets.DEBUG}}
          ALLOWED_HOSTS=${{secrets.ALLOWED_HOSTS}}
          CELERY_BROKER=${{secrets.CELERY_BROKER}}
          CELERY_BACKEND=${{secrets.CELERY_BACKEND}}
          SQL_IMAGE=${{secrets.SQL_IMAGE}}
          SQL_ENGINE=${{secrets.SQL_ENGINE}}
          SQL_HOST=${{secrets.SQL_HOST}}
          SQL_NAME=${{secrets.SQL_NAME}}
          SQL_USER=${{secrets.SQL_USER}}
          SQL_PASS=${{secrets.SQL_PASS}}
          SQL_PORT=${{secrets.SQL_PORT}}
          CACHE_IMAGE=${{secrets.CACHE_IMAGE}}
          CHOKIDAR_USEPOLLING=${{secrets.CHOKIDAR_USEPOLLING}}
          CHOKIDAR_USEPOLLING=${{secrets.CHOKIDAR_USEPOLLING}}
          AWS_ACCESS_KEY_ID=${{secrets.AWS_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY=${{secrets.AWS_SECRET_ACCESS_KEY}}
          AWS_DEFAULT_REGION=${{secrets.AWS_DEFAULT_REGION}}
          PGADMIN_DEFAULT_EMAIL=admin@admin.com
          PGADMIN_DEFAULT_PASSWORD=admin1234
          CLUSTER_NAME=docker-cluster
          NETWORK_HOST=0.0.0.0
          ELASTIC_VERSION=8.10.2
          ELASTICSEARCH_NODE_NAME=elasticsearch
          ELASTICSEARCH_HOSTS=http://elasticsearch:9200
          ELASTIC_USERNAME=elastic
          ELASTIC_PASSWORD=testpassword
          DISCOVERY_TYPE=single-node
          ES_JAVA_OPTS=-Xms512m -Xmx512m
          LS_JAVA_OPTS=-Xms256m -Xmx256m
          KIBANA_NODE_NAME=kibana
          KIBANA_SYSTEM_PASSWORD=testpassword
          LOGSTASH_INTERNAL_PASSWORD=testpassword
          METRICBEAT_INTERNAL_PASSWORD=testpassword
          FILEBEAT_INTERNAL_PASSWORD=testpassword
          HEARTBEAT_INTERNAL_PASSWORD=testpassword
          MONITORING_INTERNAL_PASSWORD=testpassword
          BEATS_SYSTEM_PASSWORD=testpassword
          EOF

        #####################################################
        #                                                   #
        # Install all dependencies required by test suites. #
        #                                                   #
        #####################################################

      - name: Build container images
        run: >-
          docker compose
          -f docker-compose.yml
          build

        ##########################################################
        #                                                        #
        # Run setup container if exist                           #
        #                                                        #
        ##########################################################

      - name: Run elk_setup
        run: |
          docker compose -f docker-compose.yml up elk_setup
          docker compose -f docker-compose.yml up -d

        ##########################################################
        #                                                        #
        # Run unit testing                                       #
        #                                                        #
        ##########################################################

      - name: Run tests
        run: |
          docker compose -f docker-compose.yml up app
          docker-compose -f docker-compose.yml run app sh -c "python manage.py test"

        ##########################################################
        #                                                        #
        # Run linting tool                                       #
        #                                                        #
        ##########################################################

      - name: Run flake8
        run: docker-compose -f docker-compose.yml run --rm app bash -c "flake8"

        ##############
        #            #
        # Tear down. #
        #            #
        ##############
      - name: Terminate all components
        if: always()
        run: >-
          docker compose
          -f docker-compose.yml
          down -v

  deploy_staging:
    name: Deploy to Staging
    runs-on: Ubuntu 20.04
    needs: [test]
    if: github.ref == 'refs/heads/staging'

    steps:
      - uses: actions/checkout@v4
      - run: echo "Deploy to STAGING code here"

  deploy_production:
    name: Deploy to Production
    runs-on: Ubuntu 20.04
    needs: [test]
    if: github.ref == 'refs/heads/production'

    steps:
      - uses: actions/checkout@v4
      - run: echo "Deploy to PRODUCTION code here"
