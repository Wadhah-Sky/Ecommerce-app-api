---

# Caller workflow

# Define name of workflow.
name: Ecommerce CI

# Specify events.
on:
  push:
    branches: [main, staging, production/aws, production/linode]
  pull_request:


# Define workflow actions.
jobs:

  test:
    name: Test
    # if you faced issue of queued jobs, it's related to matrix option and its strategy option (we deleted it).
    runs-on: ${{ fromJSON('["ubuntu-latest", "self-hosted"]')[github.repository == 'github/docs-internal'] }}
    # Using the following line instead of above will lead to issue of waiting runner to pick up the job.
    # runs-on: Ubuntu 20.04
    environment: development
    steps:
      - uses: actions/checkout@v4

        #####################################################
        #                                                   #
        # Create .env file and set all secrets required by  #
        # test suites, will set as environment variables    #
        # inside currently test image.                      #
        #                                                   #
        #####################################################
      - name: Set passwords and other required environment variables
        run: |
          cat << EOF > .env
          SECRET_KEY=${{secrets.SECRET_KEY}}
          DEBUG=${{secrets.DEBUG}}
          MAIN_DOMAIN_NAME=${{secrets.MAIN_DOMAIN_NAME}}
          ALLOWED_HOSTS=${{secrets.ALLOWED_HOSTS}}
          CELERY_BROKER=${{secrets.CELERY_BROKER}}
          CELERY_BACKEND=${{secrets.CELERY_BACKEND}}
          SQL_IMAGE=${{secrets.SQL_IMAGE}}
          SQL_ENGINE=${{secrets.SQL_ENGINE}}
          SQL_HOST=${{secrets.SQL_HOST}}
          SQL_NAME=${{secrets.SQL_NAME}}
          SQL_USER=${{secrets.SQL_USER}}
          SQL_PASS=${{secrets.SQL_PASS}}
          SQL_PORT=${{secrets.SQL_PORT}}
          CACHE_IMAGE=${{secrets.CACHE_IMAGE}}
          CHOKIDAR_USEPOLLING=${{secrets.CHOKIDAR_USEPOLLING}}
          AWS_ACCESS_KEY_ID=${{secrets.AWS_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY=${{secrets.AWS_SECRET_ACCESS_KEY}}
          AWS_DEFAULT_REGION=${{secrets.AWS_DEFAULT_REGION}}
          PGADMIN_DEFAULT_EMAIL=${{secrets.TEST_USERNAME}}
          PGADMIN_DEFAULT_PASSWORD=${{secrets.TEST_PASSWORD}}
          CLUSTER_NAME=${{secrets.CLUSTER_NAME}}
          NETWORK_HOST=${{secrets.NETWORK_HOST}}
          ELASTIC_VERSION=${{secrets.ELASTIC_VERSION}}
          ELASTICSEARCH_NODE_NAME=${{secrets.ELASTICSEARCH_NODE_NAME}}
          ELASTICSEARCH_HOSTS=${{secrets.ELASTICSEARCH_HOSTS}}
          ELASTIC_USERNAME=${{secrets.ELASTIC_USERNAME}}
          ELASTIC_PASSWORD=${{secrets.TEST_PASSWORD}}
          DISCOVERY_TYPE=${{secrets.DISCOVERY_TYPE}}
          ES_JAVA_OPTS=${{secrets.ES_JAVA_OPTS}}
          LS_JAVA_OPTS=${{secrets.LS_JAVA_OPTS}}
          KIBANA_NODE_NAME=${{secrets.KIBANA_NODE_NAME}}
          KIBANA_SYSTEM_PASSWORD=${{secrets.TEST_PASSWORD}}
          LOGSTASH_INTERNAL_PASSWORD=${{secrets.TEST_PASSWORD}}
          METRICBEAT_INTERNAL_PASSWORD=${{secrets.TEST_PASSWORD}}
          FILEBEAT_INTERNAL_PASSWORD=${{secrets.TEST_PASSWORD}}
          HEARTBEAT_INTERNAL_PASSWORD=${{secrets.TEST_PASSWORD}}
          MONITORING_INTERNAL_PASSWORD=${{secrets.TEST_PASSWORD}}
          BEATS_SYSTEM_PASSWORD=${{secrets.TEST_PASSWORD}}
          EOF

        #####################################################
        #                                                   #
        # Install all dependencies required by test suites. #
        #                                                   #
        #####################################################

      - name: Build container images
        run: >-
          docker compose
          -f docker-compose.yml
          build

        ##########################################################
        #                                                        #
        # Run setup container if exist                           #
        #                                                        #
        ##########################################################

      - name: Run elk_setup
        run: docker compose -f docker-compose.yml up elk_setup

        ##########################################################
        #                                                        #
        # Run unit testing                                       #
        #                                                        #
        ##########################################################

      - name: Run tests
        run: |
          docker compose -f docker-compose.yml run --rm app sh -c "python manage.py makemigrations" &&
          docker compose -f docker-compose.yml up app -d &&
          docker-compose -f docker-compose.yml run --rm app sh -c "python manage.py test"

        ##########################################################
        #                                                        #
        # Run linting tool                                       #
        #                                                        #
        ##########################################################

      - name: Run flake8
        run: docker-compose -f docker-compose.yml run --rm app bash -c "flake8"

        ##############
        #            #
        # Tear down. #
        #            #
        ##############
      - name: Terminate all components
        if: always()
        run: >-
          docker compose
          -f docker-compose.yml
          down -v

  deploy_staging:
    name: Deploy to Staging
    runs-on: ${{ fromJSON('["ubuntu-latest", "self-hosted"]')[github.repository == 'github/docs-internal'] }}
    needs: [test]
    if: github.ref == 'refs/heads/staging'

    steps:
      - uses: actions/checkout@v4
      - run: echo "Deploy to STAGING code here"

  deploy_production_aws:
    # Important: first of all you need to make sure that AWS EC2 that will connect to, have installed Docker.
    # Note: AWS EC2 Ubuntu is already have 'git' version control installed.
    # info: git clone: Get a working copy of the remote repository.
    #       git pull (or git fetch + git merge): I am working on this, please get me the new changes that may
    #                                            be updated by others.
    name: Deploy to Production on AWS cloud
    runs-on: ${{ fromJSON('["ubuntu-latest", "self-hosted"]')[github.repository == 'github/docs-internal'] }}
    needs: [test]
    if: github.ref == 'refs/heads/production/aws'
    environment: production
    steps:
      - name: Get Github action IP
        id: ip
        uses: haythem/public-ip@v1.2

        ##########################################################
        #                                                        #
        # Connect to your AWS EC2 instance and add current GitHub#
        # node public ip address to security group of that       #
        # instance, depending on the provided AWS credentials.   #
        #                                                        #
        ##########################################################
      - name: Add Github Actions IP to AWS EC2 Security group
        run: >-
          aws ec2 authorize-security-group-ingress 
          --group-name ${{ secrets.AWS_SECURITYGROUP_NAME }} --protocol tcp --port 22 
          --cidr ${{ steps.ip.outputs.ipv4 }}/32
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Deploy to production server
        # Install specific version of 'appleboy/ssh-action' and deploy required values like, host, username, key and script.
        # Note: key should be private not public, where private is used by the node trying to connect to the node that have
        #       public key in this case AWS account.
        #       To print public key in your node, copy the whole text:
        #       >> cat ~/.ssh/id_rsa.pub
        #
        #       To print private key in your node, copy the whole text even the comment:
        #       >> cat ~/.ssh/id_rsa
        #
        # Note: if face the following error while trying to connect to aws host using appleboy/ssh-action@master:
        #
        #       ssh.ParsePrivateKey: ssh: no key found
        #
        #       This is because you are providing ssh public key not the private.
        uses: appleboy/ssh-action@master
        with:
          # Host: is public IP (unchangeable) or DNS IPv4 for AWS EC2 instance
          host: ${{ secrets.AWS_EC2_HOST_IP }}
          # Username: is username of AWS EC2 instance which trying to connect (default ubuntu), Use the following command
          #           inside EC2 Linux instance to know the username:
          #           >> whoamI
          username: ${{ secrets.AWS_EC2_HOST_USERNAME }}
          # key: is private key that related to SSH public key that your instance use (same one that your PC use).
          key: ${{ secrets.SSH_KEY }}
          port: 22
          script_stop: true
          # The following script will run in the connected AWS EC2 instance and will:
          # 1- Remove (if exists), Create and move into directory 'ecommerce-app-api', if you used 'sudo' to
          #    create directory then maybe face issue with permission whenever you want to execute command inside it.
          # 2- Create '.env' file with all required environment variables.
          #
          # Note: since we don't initialize git repository locally, we will face following error:
          #
          #       fatal: not a git repository error
          #
          # 3- initialize .git file and config 'init.defaultBranch' to be production
          #
          # 4- Run 'git stash', saves the uncommitted changes locally, allowing you to make changes,
          #    switch branches, and perform other Git operations. You can then reapply the stashed changes
          #    when you need them. A stash is locally scoped and is not pushed to the remote:
          #
          #    >> git stash
          #
          # 5- Connect to remote repository, using:
          #
          #    >> git remote add origin $PROJECT_GIT_URL
          #
          # 6- Pull the project files from GitHub repository. note that we pull the 'production' branch, using:
          #
          #    >> git pull origin production
          #
          # 7- Give the 'deploy-docker-compose.sh' file an execute permission.
          #
          # 8- Run 'deploy-docker-compose.sh' file script with --compose-file argument that represent docker
          #    compose file to use.
          #
          # 9- Remove .env file.
          script: |
            rm -rf /home/ubuntu/ecommerce-app-api
            
            mkdir -p /home/ubuntu/ecommerce-app-api
            
            cd /home/ubuntu/ecommerce-app-api
            
            cat << EOF > .env
            SECRET_KEY=${{secrets.SECRET_KEY}}
            DEBUG=${{secrets.DEBUG}}
            MAIN_DOMAIN_NAME=${{secrets.MAIN_DOMAIN_NAME}}
            ALLOWED_HOSTS=${{secrets.ALLOWED_HOSTS}}
            CSRF_TRUSTED_ORIGINS=${{secrets.CSRF_TRUSTED_ORIGINS}}
            USE_X_FORWARDED_HOST=${{secrets.USE_X_FORWARDED_HOST}}
            CELERY_BROKER=${{secrets.CELERY_BROKER}}
            CELERY_BACKEND=${{secrets.CELERY_BACKEND}}
            SQL_IMAGE=${{secrets.SQL_IMAGE}}
            SQL_ENGINE=${{secrets.SQL_ENGINE}}
            SQL_HOST=${{secrets.SQL_HOST}}
            SQL_NAME=${{secrets.SQL_NAME}}
            SQL_USER=${{secrets.SQL_USER}}
            SQL_PASS=${{secrets.SQL_PASS}}
            SQL_PORT=${{secrets.SQL_PORT}}
            CACHE_IMAGE=${{secrets.CACHE_IMAGE}}
            CHOKIDAR_USEPOLLING=${{secrets.CHOKIDAR_USEPOLLING}}
            EMAIL_BACKEND_NAME=${{secrets.EMAIL_BACKEND_NAME}}
            EMAIL_BACKEND=${{secrets.EMAIL_BACKEND}}
            DEFAULT_FROM_EMAIL=${{secrets.DEFAULT_FROM_EMAIL}}
            SERVER_EMAIL=${{secrets.SERVER_EMAIL}}
            AWS_ACCESS_KEY_ID=${{secrets.AWS_ACCESS_KEY_ID}}
            AWS_SECRET_ACCESS_KEY=${{secrets.AWS_SECRET_ACCESS_KEY}}
            AWS_DEFAULT_REGION=${{secrets.AWS_DEFAULT_REGION}}
            MAILJET_API_KEY=${{secrets.MAILJET_API_KEY}}
            MAILJET_SECRET_KEY=${{secrets.MAILJET_SECRET_KEY}}
            PGADMIN_DEFAULT_EMAIL=${{secrets.PGADMIN_DEFAULT_EMAIL}}
            PGADMIN_DEFAULT_PASSWORD=${{secrets.PGADMIN_DEFAULT_PASSWORD}}
            CLUSTER_NAME=${{secrets.CLUSTER_NAME}}
            NETWORK_HOST=${{secrets.NETWORK_HOST}}
            ELASTIC_VERSION=${{secrets.ELASTIC_VERSION}}
            ELASTICSEARCH_NODE_NAME=${{secrets.ELASTICSEARCH_NODE_NAME}}
            ELASTICSEARCH_HOSTS=${{secrets.ELASTICSEARCH_HOSTS}}
            ELASTIC_USERNAME=${{secrets.ELASTIC_USERNAME}}
            ELASTIC_PASSWORD=${{secrets.ELASTIC_PASSWORD}}
            DISCOVERY_TYPE=${{secrets.DISCOVERY_TYPE}}
            ES_JAVA_OPTS=${{secrets.ES_JAVA_OPTS}}
            LS_JAVA_OPTS=${{secrets.LS_JAVA_OPTS}}
            KIBANA_NODE_NAME=${{secrets.KIBANA_NODE_NAME}}
            KIBANA_SYSTEM_PASSWORD=${{secrets.KIBANA_SYSTEM_PASSWORD}}
            LOGSTASH_INTERNAL_PASSWORD=${{secrets.LOGSTASH_INTERNAL_PASSWORD}}
            METRICBEAT_INTERNAL_PASSWORD=${{secrets.METRICBEAT_INTERNAL_PASSWORD}}
            FILEBEAT_INTERNAL_PASSWORD=${{secrets.FILEBEAT_INTERNAL_PASSWORD}}
            HEARTBEAT_INTERNAL_PASSWORD=${{secrets.HEARTBEAT_INTERNAL_PASSWORD}}
            MONITORING_INTERNAL_PASSWORD=${{secrets.MONITORING_INTERNAL_PASSWORD}}
            BEATS_SYSTEM_PASSWORD=${{secrets.BEATS_SYSTEM_PASSWORD}}
            DJANGO_SUPERUSER_EMAIL=${{secrets.DJANGO_SUPERUSER_EMAIL}}
            DJANGO_SUPERUSER_USERNAME=${{secrets.DJANGO_SUPERUSER_USERNAME}}
            DJANGO_SUPERUSER_PHONE_NUMBER=${{secrets.DJANGO_SUPERUSER_PHONE_NUMBER}}
            DJANGO_SUPERUSER_FIRST_NAME=${{secrets.DJANGO_SUPERUSER_FIRST_NAME}}
            DJANGO_SUPERUSER_LAST_NAME=${{secrets.DJANGO_SUPERUSER_LAST_NAME}}
            DJANGO_SUPERUSER_PASSWORD=${{secrets.DJANGO_SUPERUSER_PASSWORD}}
            CERT_DOMAINS=${{secrets.CERT_DOMAINS}}
            CERT_EMAIL=${{secrets.CERT_EMAIL}}
            CERT_GENERATE=${{secrets.CERT_GENERATE}}
            CERT_TEST_CERT=${{secrets.CERT_TEST_CERT}}
            LETSENCRYPT_DIR=${{secrets.LETSENCRYPT_DIR}}
            CERT_NAME=${{secrets.CERT_NAME}}
            OU_CERT_NAME=${{secrets.OU_CERT_NAME}}
            CERT_RENEW_INTERVAL=${{secrets.CERT_RENEW_INTERVAL}}
            CUSTOM_CERT_COMMAND=${{secrets.CUSTOM_CERT_COMMAND}}
            EOF
            
            PROJECT_GIT_URL='https://github.com/Wadhah-Sky/Ecommerce-app-api.git'
            PROJECT_BASE_PATH='/home/ubuntu/ecommerce-app-api'
            
            git init
            
            git config --global init.defaultBranch production/aws
            
            git remote add origin $PROJECT_GIT_URL
            
            git pull origin production/aws
            
            sudo chmod +x ./deploy/deploy-docker-compose.sh
            
            sudo ./deploy/deploy-docker-compose.sh --compose-file docker-compose.prod.yml && rm .env

  deploy_production_linode:
    # Deploy to Linode cloud
    name: Deploy to Production on Linode cloud
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/production/linode'
    environment: production
    steps:
      - name: Deploy to production server
        uses: appleboy/ssh-action@master
        with:
          # Host: is public IP (unchangeable) or DNS IPv4 for Linode instance
          host: ${{ secrets.LINODE_HOST_IP }}
          # Username: is username of Linode instance which trying to connect (default root), Use the following command
          #           inside EC2 Linux instance to know the username:
          #           >> whoamI
          username: ${{ secrets.LINODE_HOST_USERNAME }}
          # key: is private key that related to SSH public key that your instance use (same one that your PC use).
          key: ${{ secrets.SSH_KEY }}
          port: 22
          script_stop: true
          script: |
            rm -rf /home/root/ecommerce-app-api

            mkdir -p /home/root/ecommerce-app-api

            cd /home/root/ecommerce-app-api

            cat << EOF > .env
            SECRET_KEY=${{secrets.SECRET_KEY}}
            DEBUG=${{secrets.DEBUG}}
            MAIN_DOMAIN_NAME=${{secrets.MAIN_DOMAIN_NAME}}
            ALLOWED_HOSTS=${{secrets.ALLOWED_HOSTS}}
            CSRF_TRUSTED_ORIGINS=${{secrets.CSRF_TRUSTED_ORIGINS}}
            USE_X_FORWARDED_HOST=${{secrets.USE_X_FORWARDED_HOST}}
            CELERY_BROKER=${{secrets.CELERY_BROKER}}
            CELERY_BACKEND=${{secrets.CELERY_BACKEND}}
            SQL_IMAGE=${{secrets.SQL_IMAGE}}
            SQL_ENGINE=${{secrets.SQL_ENGINE}}
            SQL_HOST=${{secrets.SQL_HOST}}
            SQL_NAME=${{secrets.SQL_NAME}}
            SQL_USER=${{secrets.SQL_USER}}
            SQL_PASS=${{secrets.SQL_PASS}}
            SQL_PORT=${{secrets.SQL_PORT}}
            CACHE_IMAGE=${{secrets.CACHE_IMAGE}}
            CHOKIDAR_USEPOLLING=${{secrets.CHOKIDAR_USEPOLLING}}
            EMAIL_BACKEND_NAME=${{secrets.EMAIL_BACKEND_NAME}}
            EMAIL_BACKEND=${{secrets.EMAIL_BACKEND}}
            DEFAULT_FROM_EMAIL=${{secrets.DEFAULT_FROM_EMAIL}}
            SERVER_EMAIL=${{secrets.SERVER_EMAIL}}
            MAILJET_API_KEY=${{secrets.MAILJET_API_KEY}}
            MAILJET_SECRET_KEY=${{secrets.MAILJET_SECRET_KEY}}
            PGADMIN_DEFAULT_EMAIL=${{secrets.PGADMIN_DEFAULT_EMAIL}}
            PGADMIN_DEFAULT_PASSWORD=${{secrets.PGADMIN_DEFAULT_PASSWORD}}
            CLUSTER_NAME=${{secrets.CLUSTER_NAME}}
            NETWORK_HOST=${{secrets.NETWORK_HOST}}
            ELASTIC_VERSION=${{secrets.ELASTIC_VERSION}}
            ELASTICSEARCH_NODE_NAME=${{secrets.ELASTICSEARCH_NODE_NAME}}
            ELASTICSEARCH_HOSTS=${{secrets.ELASTICSEARCH_HOSTS}}
            ELASTIC_USERNAME=${{secrets.ELASTIC_USERNAME}}
            ELASTIC_PASSWORD=${{secrets.ELASTIC_PASSWORD}}
            DISCOVERY_TYPE=${{secrets.DISCOVERY_TYPE}}
            ES_JAVA_OPTS=${{secrets.ES_JAVA_OPTS}}
            LS_JAVA_OPTS=${{secrets.LS_JAVA_OPTS}}
            KIBANA_NODE_NAME=${{secrets.KIBANA_NODE_NAME}}
            KIBANA_SYSTEM_PASSWORD=${{secrets.KIBANA_SYSTEM_PASSWORD}}
            LOGSTASH_INTERNAL_PASSWORD=${{secrets.LOGSTASH_INTERNAL_PASSWORD}}
            METRICBEAT_INTERNAL_PASSWORD=${{secrets.METRICBEAT_INTERNAL_PASSWORD}}
            FILEBEAT_INTERNAL_PASSWORD=${{secrets.FILEBEAT_INTERNAL_PASSWORD}}
            HEARTBEAT_INTERNAL_PASSWORD=${{secrets.HEARTBEAT_INTERNAL_PASSWORD}}
            MONITORING_INTERNAL_PASSWORD=${{secrets.MONITORING_INTERNAL_PASSWORD}}
            BEATS_SYSTEM_PASSWORD=${{secrets.BEATS_SYSTEM_PASSWORD}}
            DJANGO_SUPERUSER_EMAIL=${{secrets.DJANGO_SUPERUSER_EMAIL}}
            DJANGO_SUPERUSER_USERNAME=${{secrets.DJANGO_SUPERUSER_USERNAME}}
            DJANGO_SUPERUSER_PHONE_NUMBER=${{secrets.DJANGO_SUPERUSER_PHONE_NUMBER}}
            DJANGO_SUPERUSER_FIRST_NAME=${{secrets.DJANGO_SUPERUSER_FIRST_NAME}}
            DJANGO_SUPERUSER_LAST_NAME=${{secrets.DJANGO_SUPERUSER_LAST_NAME}}
            DJANGO_SUPERUSER_PASSWORD=${{secrets.DJANGO_SUPERUSER_PASSWORD}}
            CERT_DOMAINS=${{secrets.CERT_DOMAINS}}
            CERT_EMAIL=${{secrets.CERT_EMAIL}}
            CERT_GENERATE=${{secrets.CERT_GENERATE}}
            CERT_TEST_CERT=${{secrets.CERT_TEST_CERT}}
            LETSENCRYPT_DIR=${{secrets.LETSENCRYPT_DIR}}
            CERT_NAME=${{secrets.CERT_NAME}}
            OU_CERT_NAME=${{secrets.OU_CERT_NAME}}
            CERT_RENEW_INTERVAL=${{secrets.CERT_RENEW_INTERVAL}}
            CUSTOM_CERT_COMMAND=${{secrets.CUSTOM_CERT_COMMAND}}
            EOF

            PROJECT_GIT_URL='https://github.com/Wadhah-Sky/Ecommerce-app-api.git'
            PROJECT_BASE_PATH='/home/root/ecommerce-app-api'

            git init

            git config --global init.defaultBranch production/linode

            git remote add origin $PROJECT_GIT_URL

            git pull origin production/linode

            sudo chmod +x ./deploy/deploy-docker-compose.sh

            sudo ./deploy/deploy-docker-compose.sh --compose-file docker-compose.prod.yml && rm .env
