---

# Note: if you have multiple docker compose .yml file in the directory the system currently in,
#       then you can use -f flag (file path):
#
#       >> docker-compose -f docker-swarm.yml up

# Remember: the health check test and the deploy option is use in swarm mode, and the health test is run by
#           service itself not by daemon which mean you should use localhost ip in the commands NOT the service
#           name.

version: "3.9"

services:

  cache:
    image: redis:7-alpine
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.20'
          memory: 100M
        reservations:
          cpus: '0.05'
          memory: 20M
    ports:
      - '6379:6379'
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep 'PONG' || exit 1"]
      interval: 10s
      timeout: 10s
      start_period: 20s
      retries: 3

    networks:
      - webnet

  db:
    image: 127.0.0.1:5000/postgres
    ports:
      - '5432:5432'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready --quiet --dbname=$${POSTGRES_DB} --username=$${POSTGRES_USER} || exit 1"]
      interval: 10s
      timeout: 10s
      start_period: 30s
      retries: 3
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    volumes:
     - postgres-db:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${SQL_NAME}
      - POSTGRES_USER=${SQL_USER}
      - POSTGRES_PASSWORD=${SQL_PASS}
    networks:
      - webnet

  pgadmin:
    image: dpage/pgadmin4
    healthcheck:
      # the following ping test (comment) not working in swarm mode.
      # test: ["CMD", "ping localhost:80 || exit 1"]
      test: ["CMD", "wget", "-O", "-", "http://localhost:80/misc/ping"]
      interval: 10s
      timeout: 10s
      start_period: 180s
      retries: 3
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.10'
          memory: 100M
        reservations:
          cpus: '0.02'
          memory: 20M
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    depends_on:
      # in swarm mode the depends on list will depend on 'service_healthy' of listed
      # services by default not like compose that depend on 'started_service'.
      - db
    networks:
      - webnet

  elasticsearch:
    image: 127.0.0.1:5000/elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    healthcheck:
      test: [ "CMD-SHELL", "curl -u elastic:${ELASTIC_PASSWORD} localhost:9200/_cluster/health?pretty", "| grep -E ", '"status" : "yellow"', " || exit 1" ]
      interval: 10s
      timeout: 10s
      start_period: 180s
      retries: 3
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      resources:
        limits:
          # Note: be careful when specify the values due it's possible to cause to exit the container with 0
          #       at initializing time because health check test run before service is ready.
          cpus: '0.40'
          memory: 500M
        reservations:
          cpus: '0.05'
          memory: 50M
    volumes:
      - ./compose/local/elk/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z
      - elasticsearch:/usr/share/elasticsearch/data:Z
    environment:
      - node.name=${ELASTICSEARCH_NODE_NAME}
      - ES_JAVA_OPTS=${ES_JAVA_OPTS}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD:-}
      - discovery.type=${DISCOVERY_TYPE}
    networks:
      - webnet

  elk_setup:
    image: 127.0.0.1:5000/elk-setup
    # To start a container as the main process with PID 1, it starts and manages all the
    # other processes running inside the container, don't worry about it's will start before
    # elasticsearch service which depends on because we use script to keep waiting to elasticsearch
    # to be up, when the users/roles created, this service will exit.
    init: true
    deploy:
      restart_policy:
        # When it exits, no need to restart it.
        condition: none
    volumes:
      - ./compose/local/elk/setup/entrypoint.sh:/entrypoint.sh:ro,Z
      - ./compose/local/elk/setup/lib.sh:/lib.sh:ro,Z
      - ./compose/local/elk/setup/roles:/roles:ro,Z
    environment:
      # Note: passwords should be at least 6 characters
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - LOGSTASH_INTERNAL_PASSWORD=${LOGSTASH_INTERNAL_PASSWORD}
      - KIBANA_SYSTEM_PASSWORD=${KIBANA_SYSTEM_PASSWORD}
      - METRICBEAT_INTERNAL_PASSWORD=${METRICBEAT_INTERNAL_PASSWORD}
      - FILEBEAT_INTERNAL_PASSWORD=${FILEBEAT_INTERNAL_PASSWORD}
      - HEARTBEAT_INTERNAL_PASSWORD=${HEARTBEAT_INTERNAL_PASSWORD}
      - MONITORING_INTERNAL_PASSWORD=${MONITORING_INTERNAL_PASSWORD}
      - BEATS_SYSTEM_PASSWORD=${BEATS_SYSTEM_PASSWORD}
    depends_on:
      - elasticsearch
    networks:
      - webnet

  app:
    image: 127.0.0.1:5000/django
    ports:
      - '8000:8000'
    healthcheck:
      test: ["CMD-SHELL", "curl --fail --silent --output /dev/null http://localhost:8000/ping || exit 1"]
      interval: 10s
      timeout: 10s
      start_period: 60s
      retries: 3
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    volumes:
      - ./backend/django_rest:/usr/src/backend/django_rest
      - ./backend/django_rest/data:/usr/src/vol/web
    command: bash -c "/usr/src/compose/start-django.sh"
    environment: &app_env
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=${DEBUG}
      - MAIN_DOMAIN_NAME=${MAIN_DOMAIN_NAME}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - CELERY_BROKER=${CELERY_BROKER}
      - CELERY_BACKEND=${CELERY_BACKEND}
      - SQL_ENGINE=${SQL_ENGINE}
      - SQL_HOST=${SQL_HOST}
      - SQL_NAME=${SQL_NAME}
      - SQL_USER=${SQL_USER}
      - SQL_PASS=${SQL_PASS}
      - SQL_PORT=5432
      - EMAIL_BACKEND_NAME=${EMAIL_BACKEND_NAME}
      - EMAIL_BACKEND=${EMAIL_BACKEND}
      - DEFAULT_FROM_EMAIL=${DEFAULT_FROM_EMAIL}
      - SERVER_EMAIL=${SERVER_EMAIL}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
      - MAILJET_API_KEY=${MAILJET_API_KEY}
      - MAILJET_SECRET_KEY=${MAILJET_SECRET_KEY}
      - SENDINBLUE_API_KEY=${SENDINBLUE_API_KEY}
      - ELASTIC_USERNAME=${ELASTIC_USERNAME}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTICSEARCH_HOSTS=${ELASTICSEARCH_HOSTS}
      - DJANGO_SUPERUSER_EMAIL=${DJANGO_SUPERUSER_EMAIL}
      - DJANGO_SUPERUSER_USERNAME=${DJANGO_SUPERUSER_USERNAME}
      - DJANGO_SUPERUSER_PHONE_NUMBER=${DJANGO_SUPERUSER_PHONE_NUMBER}
      - DJANGO_SUPERUSER_FIRST_NAME=${DJANGO_SUPERUSER_FIRST_NAME}
      - DJANGO_SUPERUSER_LAST_NAME=${DJANGO_SUPERUSER_LAST_NAME}
      - DJANGO_SUPERUSER_PASSWORD=${DJANGO_SUPERUSER_PASSWORD}
    depends_on:
      - db
      - cache
      - elasticsearch
    networks:
      - webnet

  worker:
    image: 127.0.0.1:5000/worker
    healthcheck:
      test: [ "CMD-SHELL", "celery inspect ping || exit 1" ]
      interval: 10s
      timeout: 10s
      start_period: 100s
      retries: 3
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    volumes: &worker_vol
      - ./backend/django_rest:/usr/src/backend/django_rest
    command: bash -c "/usr/src/compose/start-celeryworker.sh"
    environment: *app_env
    depends_on:
      - app
    networks:
      - webnet

  ui:
    image: 127.0.0.1:5000/vue
    ports:
      - "8080:8080"
    healthcheck:
      test: [ "CMD-SHELL", "wget -q --spider http://localhost:8080/ || exit 1"]
      interval: 10s
      timeout: 10s
      start_period: 80s
      retries: 3
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    volumes:
      - ./frontend/vue_spa:/usr/src/frontend/vue_spa
      - /usr/src/frontend/vue_spa/node_modules
    command: sh -c "npm run serve"
    environment:
      - CHOKIDAR_USEPOLLING=${CHOKIDAR_USEPOLLING}
    depends_on:
      - app
    networks:
      - webnet

# Set network that all services will be in it.
networks:
  webnet:

volumes:
  postgres-db:
    driver: local
  elasticsearch:
    driver: local