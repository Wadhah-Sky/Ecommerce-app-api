# Set Nginx server configurations that will be stored in /etc/nginx/conf.d directory and will be
# included in /etc/nginx/nginx.conf file.

# Info: This official NGINX Docker image, is not meant to be a full config. It's included at the http
#       block at /etc/nginx/conf.d file in the image. So you could face problem to set user ot other arguments:
#
#        nginx: [emerg] "user" directive is not allowed here in /etc/nginx/conf.d/nginx.conf
#

# Important: Nginx is responsible to pass requests to/from Gunicorn, means that other services in Dockerfile
#            with exception to 'app' (Django) service will be accessed directly.

# Note: you should not forget to put semi-colon after each line of argument and its value, otherwise will face
#       error, like:
#
#       nginx: [emerg] invalid number of arguments in "root" directive in /etc/nginx/default.conf

# Info: for nginx location pattern, you have the following:
#
# 1- Nginx location:
# --------------------------------------------------------------------------------------------------------------------------------------------
# Search-Order       Modifier       Description                                                        Match-Type        Stops-search-on-match
# --------------------------------------------------------------------------------------------------------------------------------------------
#     1st               =           The URI must match the specified pattern exactly                  Simple-string              Yes
#     2nd               ^~          The URI must begin with the specified pattern                     Simple-string              Yes
#     3rd             (None)        The URI must begin with the specified pattern                     Simple-string               No
#     4th               ~           The URI must be a case-sensitive match to the specified Rx      Perl-Compatible-Rx      Yes (first match)
#     4th               ~*          The URI must be a case-insensitive match to the specified Rx    Perl-Compatible-Rx      Yes (first match)
#     N/A               @           Defines a named location block.                                   Simple-string              Yes
# --------------------------------------------------------------------------------------------------------------------------------------------
#
# 2- Capturing group:
# -----------------------------------------------------------------------------------------
#    ()    : Group/Capturing-group, capturing mean match and retain/output/use what matched
#            the patern inside (). the default bracket mode is "capturing group" while (?:)
#            is a non capturing group. example (?:a|b) match a or b in a non capturing mode
# -----------------------------------------------------------------------------------------
#    ?:    : Non capturing group
#    ?=    : Positive look ahead
#    ?!    : is for negative look ahead (do not match the following...)
#    ?<=   : is for positive look behind
#    ?<!   : is for negative look behind
# -----------------------------------------------------------------------------------------
#
# 3- The forward slash:
# -----------------------------------------------------------------------------------------
#     /    : It doesn't actually do anything. In Javascript, Perl and some other languages,
#            it is used as a delimiter character explicitly for regular expressions.
#            Some languages like PHP use it as a delimiter inside a string,
#            with additional options passed at the end, just like Javascript and Perl.
#            Nginx does not use delimiter, / can be escaped with \/ for code portability
#            purpose BUT this is not required for nginx / are handled literally
#            (don't have other meaning than /)
# -----------------------------------------------------------------------------------------
#
# 4- Other regex chars:
# -----------------------------------------------------------------------------------------
#     ~     : Enable regex mode for location (in regex ~ mean case-sensitive match)
#     ~*    : case-insensitive match
#     |     : Or
#     ()    : Match group or evaluate the content of ()
#     $     : the expression must be at the end of the evaluated text
#             (no char/text after the match) $ is usually used at the end of a regex
#             location expression.
#     ?     : Check for zero or one occurrence of the previous char ex jpe?g
#     ^~    : The match must be at the beginning of the text, note that nginx will not perform
#             any further regular expression match even if an other match is available
#             (check the table above); ^ indicate that the match must be at the start of
#             the uri text, while ~ indicates a regular expression match mode.
#             example (location ^~ /realestate/.*)
#             Nginx evaluation exactly this as don't check regexp locations if this
#             location is longest prefix match.
#     =     : Exact match, no sub folders (location = /)
#     ^     : Match the beginning of the text (opposite of $). By itself, ^ is a
#             shortcut for all paths (since they all have a beginning).
#     .*    : Match zero, one or more occurrence of any char
#     \     : Escape the next char
#     .     : Any char
#     *     : Match zero, one or more occurrence of the previous char
#     !     : Not (negative look ahead)
#     {}    : Match a specific number of occurrence ex. [0-9]{3} match 342 but not 32
#             {2,4} match length of 2, 3 and 4
#     +     : Match one or more occurrence of the previous char
#     []    : Match any char inside
# --------------------------------------------------------------------------------------------


# name upstream
upstream api{
    # Specify the name of django service in Docker .yml file and its port.
    # Note: The port number on the server in the group matches the one the uWSGI server
    #       binds to, as specified by the socket argument in the sample uwsgi command.
    # Note: nginx: [emerg] host not found in upstream "app:8000" in /etc/nginx/conf.d/nginx.conf:6
    server app:8000;
}

server {

    # Info: the error of:
    #
    #       location "/" is outside location "/media/" in /etc/nginx/conf.d/nginx.conf
    #
    #       caused by unclosed brackets {}

    # Following config to solve issue of HTTP 400 Bad request (Request Header Or
    # Cookie Too Large). the default buffer number and size is 4 and 8k.
    large_client_header_buffers 4 16k;

    # Listen to the port/ports where container service of Docker have been set
    # (the right side) like: '80:80' which the Nginx server redirect to the defined
    # upstream server.
    # Note: It is possible to configure a single server that handles both HTTP and HTTPS requests.
    # Info: port 80 is default for any domain TCP call and the browser remove it from url.
    listen 80 default_server;
    listen [::]:80;

    server_name  _;

    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }
    location / {
        return 301 https://$host$request_uri;
    }

    # You need to define ssl_certificate be fore using ssl.
#     listen 443 ssl http2;
#     listen [::]:443 ssl http2;
#     ssl_certificate /usr/share/nginx/certificates/fullchain.pem;
#     ssl_certificate_key /usr/share/nginx/certificates/privkey.pem;
#     ssl_dhparam /etc/ssl-options/ssl-dhparams.pem;
#     include /etc/ssl-options/options-nginx-ssl.conf;
#
#     charset utf-8;

    # server_name helps NGINX route requests between multiple server blocks.
    # Server blocks allow you to define backend services and specific ways to
    # handle those requests. The server_name tells NGINX which server block to
    # use. This directive is really useful for domain based routing and SSL
    # termination ( SSL is standard technology for securing an internet
    # connection by encrypting data sent between a website and a browser (or
    # between two servers)).
#     server_name jamieandcassie.store *.jamieandcassie.store;

    # The root directive specifies the root directory that will be used to search for a file.
    # To obtain the path of a requested file, NGINX appends the request URI to the path specified
    # by the root directive. The directive can be placed on any level within the http {}, server {},
    # or location {} contexts.
#     root  /usr/share/nginx/html;
#
#     index  index.html index.htm;

    # Serves the files necessary for Certbot to authenticate the server and create the certificate.
#     location /.well-known/acme-challenge/ {
#         root /var/www/certbot;
#     }

    # Set backend urls, like:
    # http://127.0.0.1:80/admin/
    # http://127.0.0.1:80/api/
    #
    # Note: If you see an 413 Request Entity Too Large error, you'll need to increase
    #       the maximum allowed size of the client request body in either the server
    #       or location context within the Nginx config (client_max_body_size).
    # Info: if you want to use pattern like anything
#     location ~ ^/(admin|_nested_admin|api|api-auth){
#
#         # Pass request to Docker application (Django) service.
#         proxy_pass http://api;
#         # the X-Forwarded-For client request header field with the $remote_addr variable appended to it,
#         # separated by a comma. If the X-Forwarded-For field is not present in the client request header,
#         # the $proxy_add_x_forwarded_for variable is equal to the $remote_addr variable.
#         # Note: If you don't and you don't know if your app can be spoofed with the incorrect X-Forwarded-For
#         #       header, and you don't have a trusted proxy server(s) in front of your nginx instance, the most
#         #       safe way will be to set both according to an actual remote peer address:
#         #
#         #       proxy_set_header X-Forwarded-For $remote_addr;
#         #       proxy_set_header X-Real-IP       $remote_addr;
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         proxy_set_header X-Real-IP $remote_addr;
#         # pass schema of proxy server.
#         proxy_set_header X-Forwarded-Proto $scheme;
#         # Set the value of host (proxy server) to be passed to proxy pass server, here we pass host and port.
#         # Note: $server_port is 80 which is the port we listen to application server.
#         proxy_set_header X-Forwarded-Host $host:$server_port;
#         proxy_set_header X-Forwarded-Server $host;
#         proxy_set_header Host $host;
#         client_max_body_size 100M;
#         proxy_headers_hash_bucket_size 128;
#         # The proxy_redirect directive is only involved with changing the Location response header
#         # in a 3xx status message.
#         proxy_redirect off;
#         # To solve [warn] 1#1: could not build optimal proxy_headers_hash, set
#         # the following two lines:
#         proxy_headers_hash_max_size 512;
#     }
#
#     location /health{
#         access_log off;
#         return 200 "healthy\n";
#     }
#
#     error_page 404 /404.html;
#     location = /40x.html{
#         root /usr/share/nginx/html;
#     }
#
#     error_page 500 502 503 504 /50x.html;
#     location = /50x.html{
#         root /usr/share/nginx/html;
#     }

    # Route your django static files (defined in settings.py as STATIC_URL)
#     location /static/static/{
#         alias /usr/src/vol/web/static/;
#     }

    # Map to your django media files (defined in settings.py as MEDIA_URL)
#     location /static/media/{
#         alias /usr/src/vol/web/media/;
#         # in case requested media file doesn't exists, try with external source and pass url (name of file).
#         try_files $uri @externalbackup;
#     }
#
#     location @externalbackup{
#         return 301 http://127.0.0.1:8000/static/media$request_uri;
#     }

    # Redirect any call for url/pg
    # Note: 1- don't use word admin even if 'pgadmin' because is already used in the pattern of backend urls location.
    #       2- It's better to access the service directly from through Host to required docker service and remember
    #          DNS has nothing to do with ports, it's only work IP address unless you set records to IP:port.
    # location /pg-access/{
        # Redirect to docker pgadmin service.

        # For your home machine:
        # return 301 http://127.0.0.1:5050;
        # Or
        # return 301 pgadmin:5050;

        # For cloud node:
        # return 301 http://172.233.190.90:5050;
    # }

    # Set frontend static files
    # first method
    # Important: you should not define any location after this one.
#     location /{
#         try_files $uri $uri/ /index.html;
#     }

    # Set frontend static files
    # Second method
    # location / {
    #    try_files $uri $uri/ @rewrites;
    # }

    # Note: rewrite rules are used to change entire or a part of the URL requested by a client.
    #       The main motive for changing an URL is to inform the clients that the resources they
    #       are looking for have changed its location apart from controlling the flow of executing
    #       pages in NGINX.
    #
    # Info: You may have different sets of rewrite rules for different locations.
    #       1- When rewrite module meets 'last', it stops processing the current set and the rewritten
    #          request is passed once again to find the appropriate location (and the new set of rewriting rules).
    #       2- If the rule ends with 'break', the rewriting also stops, but the rewritten request is not passed to
    #          another location.
    #       That is, if there are two locations: loc1 and loc2, and there's a rewriting rule in loc1 that changes
    #       loc1 to loc2 AND ends with last, the request will be rewritten and passed to location loc2. If the rule
    #       ends with break, it will belong to location loc1.
    # location @rewrites{
    #   rewrite ^(.+)$ /index.html last;
    # }

    # Set frontend static files
    # Third method, use it in case you want to specify the url name, here we specify it
    # 1- could start with anything and then
    # 2- should contains 'dist' then
    # 3- slash
    # 4- contains one of the listed words.
    # 5- slash
    # 6- whatever characters to the end of url.
    #
    # Important: the url should be translatable as location in root and listed try files.
    # location ~ .(dist)/(js|css|img)/(.+)$ {
	#	try_files $uri $uri/ /$1/$2/$3;
	# }
}

server{

    large_client_header_buffers 4 16k;

    server_name _;

    root  /usr/share/nginx/html;

    index  index.html index.htm;

    # You need to define ssl_certificate be fore using ssl.
    listen 443 ssl;
    listen [::]:443 ssl;
    ssl_certificate /usr/share/nginx/certificates/fullchain.pem;
    ssl_certificate_key /usr/share/nginx/certificates/privkey.pem;
    ssl_dhparam /etc/ssl-options/ssl-dhparams.pem;
    include /etc/ssl-options/options-nginx-ssl.conf;

    charset utf-8;

    # Serves the files necessary for Certbot to authenticate the server and create the certificate.
#     location /.well-known/acme-challenge/ {
#         root /var/www/certbot;
#     }

    # Set backend urls, like:
    # http://127.0.0.1:80/admin/
    # http://127.0.0.1:80/api/
    #
    # Note: If you see an 413 Request Entity Too Large error, you'll need to increase
    #       the maximum allowed size of the client request body in either the server
    #       or location context within the Nginx config (client_max_body_size).
    # Info: if you want to use pattern like anything
    location ~ ^/(admin|_nested_admin|api|api-auth){

        # Pass request to Docker application (Django) service.
        proxy_pass http://api;
        # the X-Forwarded-For client request header field with the $remote_addr variable appended to it,
        # separated by a comma. If the X-Forwarded-For field is not present in the client request header,
        # the $proxy_add_x_forwarded_for variable is equal to the $remote_addr variable.
        # Note: If you don't and you don't know if your app can be spoofed with the incorrect X-Forwarded-For
        #       header, and you don't have a trusted proxy server(s) in front of your nginx instance, the most
        #       safe way will be to set both according to an actual remote peer address:
        #
        #       proxy_set_header X-Forwarded-For $remote_addr;
        #       proxy_set_header X-Real-IP       $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Real-IP $remote_addr;
        # pass schema of proxy server.
        proxy_set_header X-Forwarded-Proto $scheme;
        # Set the value of host (proxy server) to be passed to proxy pass server, here we pass host and port.
        # Note: $server_port is 80 which is the port we listen to application server.
        proxy_set_header X-Forwarded-Host $host:$server_port;
        proxy_set_header X-Forwarded-Server $host;
        proxy_set_header Host $host;
        client_max_body_size 100M;
        proxy_headers_hash_bucket_size 128;
        # The proxy_redirect directive is only involved with changing the Location response header
        # in a 3xx status message.
        proxy_redirect off;
        # To solve [warn] 1#1: could not build optimal proxy_headers_hash, set
        # the following two lines:
        proxy_headers_hash_max_size 512;
    }

    location /health{
        access_log off;
        return 200 "healthy\n";
    }

    error_page 404 /404.html;
    location = /40x.html{
        root /usr/share/nginx/html;
    }

    error_page 500 502 503 504 /50x.html;
    location = /50x.html{
        root /usr/share/nginx/html;
    }

    # Route your django static files (defined in settings.py as STATIC_URL)
    location /static/static/{
        alias /usr/src/vol/web/static/;
    }

    # Map to your django media files (defined in settings.py as MEDIA_URL)
    location /static/media/{
        alias /usr/src/vol/web/media/;
        # in case requested media file doesn't exists, try with external source and pass url (name of file).
        try_files $uri @externalbackup;
    }

    location @externalbackup{
        return 301 http://127.0.0.1:8000/static/media$request_uri;
    }

    # Set frontend static files
    # first method
    # Important: you should not define any location after this one.
    location /{
        try_files $uri $uri/ /index.html;
    }

}